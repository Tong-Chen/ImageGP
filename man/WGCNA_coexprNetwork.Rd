% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/WGCNA.R
\name{WGCNA_coexprNetwork}
\alias{WGCNA_coexprNetwork}
\title{WGCNA main function.}
\usage{
WGCNA_coexprNetwork(
  datExpr,
  power,
  maxBlockSize = NULL,
  minModuleSize = NULL,
  networkType = "signed",
  mergeCutHeight = 0.2,
  numericLabels = TRUE,
  pamRespectsDendro = FALSE,
  saveTOMs = TRUE,
  corType = "bicor",
  maxPOutliers = NULL,
  loadTOM = TRUE,
  TOMDenom = "min",
  deepSplit = 1,
  stabilityCriterion = "Individual fraction",
  saveTOMFileBase = "blockwiseTOM",
  verbose = 3,
  randomSeed = 1117,
  saveplot = NULL,
  width = 14,
  height = 7,
  noplot = FALSE,
  dynamicCutPlot = TRUE,
  ...
)
}
\arguments{
\item{datExpr}{ Expression data. A matrix (preferred) or 
data frame in which columns are genes and rows ar samples. NAs are
allowed, but not too many. See \code{checkMissingData} below and details.}

\item{power}{ soft-thresholding power for network construction. }

\item{maxBlockSize}{integer giving maximum block size for module detection. Ignored if \code{blocks}
above is non-NULL. Otherwise, if the number of genes in \code{datExpr} exceeds \code{maxBlockSize}, genes
will be pre-clustered into blocks whose size should not exceed \code{maxBlockSize}. }

\item{minModuleSize}{ minimum module size for module detection. See
\code{\link[dynamicTreeCut]{cutreeDynamic}} for more details.  }

\item{networkType}{ network type. Allowed values are (unique abbreviations of) \code{"unsigned"},
\code{"signed"}, \code{"signed hybrid"}. See \code{\link[WGCNA]{adjacency}}. }

\item{mergeCutHeight}{ dendrogram cut height for module merging. }

\item{numericLabels}{ logical: should the returned modules be labeled by colors (\code{FALSE}), or by
numbers (\code{TRUE})? }

\item{pamRespectsDendro}{Logical, only used when \code{pamStage} is \code{TRUE}. 
If \code{TRUE}, the PAM stage will
respect the dendrogram in the sense an object can be PAM-assigned only to clusters that lie below it on
the branch that the object is merged into. 
     See \code{\link[dynamicTreeCut]{cutreeDynamic}} for more details. }

\item{saveTOMs}{ logical: should the consensus topological overlap matrices for each block be saved
and returned?  }

\item{corType}{character string specifying the correlation to be used. Allowed values are (unique
abbreviations of) \code{"pearson"} and \code{"bicor"}, corresponding to Pearson and bidweight
midcorrelation, respectively. Missing values are handled using the \code{pairwise.complete.obs} option. }

\item{maxPOutliers}{ only used for \code{corType=="bicor"}. Specifies the maximum percentile of data 
that can be considered outliers on either 
side of the median separately. For each side of the median, if
higher percentile than \code{maxPOutliers} is considered an outlier by the weight function based on
\code{9*mad(x)}, the width of the weight function is increased such that the percentile of outliers on
that side of the median equals \code{maxPOutliers}. Using \code{maxPOutliers=1} will effectively disable
all weight function broadening; using \code{maxPOutliers=0} will give results that are quite similar (but
not equal to) Pearson correlation. }

\item{loadTOM}{logical: should Topological Overlap Matrices be loaded from previously saved files (\code{TRUE}) 
or calculated (\code{FALSE})? It may be useful to load previously saved TOM matrices if these have been
calculated previously, since TOM calculation is often the most computationally expensive part of network
construction and module identification. See \code{saveTOMs} and \code{saveTOMFileBase} below for when and how TOM
files are saved, and what the file names are. If \code{loadTOM} is \code{TRUE} but the files cannot be
found, or do not contain the correct TOM data, TOM will be recalculated.}

\item{TOMDenom}{ a character string specifying the TOM variant to be used. Recognized values are 
\code{"min"} giving the standard TOM described in Zhang and Horvath (2005), and \code{"mean"} in which 
the \code{min} function in the denominator is replaced by \code{mean}. The \code{"mean"} may produce 
better results but at this time should be considered experimental.}

\item{deepSplit}{ integer value between 0 and 4. Provides a simplified control over how sensitive
module detection should be to module splitting, with 0 least and 4 most sensitive. See
\code{\link[dynamicTreeCut]{cutreeDynamic}} for more details. }

\item{stabilityCriterion}{One of \code{c("Individual fraction", "Common fraction")}, indicating which method
for assessing stability similarity of two branches should be used. We recommend \code{"Individual fraction"}
which appears to perform better; the \code{"Common fraction"} method is provided for backward compatibility
since it was the (only) method available prior to WGCNA version 1.60.}

\item{saveTOMFileBase}{ character string containing the file name base for files containing the
consensus topological overlaps. The full file names have \code{"block.1.RData"}, \code{"block.2.RData"}
etc. appended. These files are standard R data files and can be loaded using the \code{\link{load}}
function. }

\item{verbose}{ integer level of verbosity. Zero means silent, higher values make the output
progressively more and more verbose. }

\item{randomSeed}{integer to be used as seed for the random number generator before the function
starts. If a current seed exists, it is saved and restored upon exit. If \code{NULL} is given, the 
function will not save and restore the seed. }

\item{saveplot}{Save plot to given file "a.pdf", "b.png".}

\item{width}{Width of graphics in inches. Default 14.}

\item{height}{Height of graphics in inches. Default 7.}

\item{noplot}{Return construccted net object only.}

\item{dynamicCutPlot}{Plot merged modules as well as dynamic cutted modules before merge.}

\item{...}{Other parameters given to \code{\link[WGCNA]{blockwiseModules}}.}
}
\value{
A network
}
\description{
WGCNA main function.
}
\section{Explanations}{

\itemize{
\item maxBlockSize: Maximum allowed number of genes in one block.
Default "all genes in one block". Please check
\url{http://www.peterlangfelder.com/blockwise-network-analysis-of-large-data/} for
more explanations. Analyzing a set of 20,000 genes requires between 8 and 16 GB of memory;
40,000 genes would increase the requirement to 32-64 GB.
A full network analysis of 500,000 genes would theoretically require some 7 TB of memory.
}

Quote: I emphasize that the blockwise analysis creates an approximation to the
network that would result from a single block analysis. The approximation
is often very good but the modules are not quite the same.
If possible, I recommend running the analysis in a single block;
if not, use the largest blocks your computer can handle.
\itemize{
\item mergeCutHeight The larger the less number of merged modules. Normally 0.15-0.3.
\item networkType: "signed" is recommended. However, number of genes in modules would also
be less for "signed" netwrok. Check \code{WGCNA_softpower} for the detail.
\item corType: biweight mid-correlation (bicor) recommended.
}
}

\examples{

df = generateAbundanceDF(nSample=30, nGrp=3, sd=5)
datExpr <- WGCNA_dataFilter(df)
datExpr <- WGCNA_sampleClusterDetectOutlier(datExpr)
power <- WGCNA_softpower(datExpr)
net <- WGCNA_coexprNetwork(datExpr, power)

#2
exprMat <- "test.file"
wgcnaL <- WGCNA_readindata(exprMat)

traitData <- 'trait.file'
wgcnaL <- WGCNA_readindata(exprMat, traitData)
datExpr <- wgcnaL$datExpr
WGCNA_dataCheck(datExpr)
datExpr <- WGCNA_dataFilter(datExpr)
datExpr <- WGCNA_sampleClusterDetectOutlier(datExpr)
# datExpr <- WGCNA_sampleClusterDetectOutlier(datExpr, traitColors=wgcnaL$traitColors)
power <- WGCNA_softpower(datExpr)
net <- WGCNA_coexprNetwork(datExpr, power)

}
